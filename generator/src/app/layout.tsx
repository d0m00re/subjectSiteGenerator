"use client"

// 

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import AppBar, { Header } from "@/components/AppBar";

import toast, { Toaster } from 'react-hot-toast';

import "react-loading-skeleton/dist/skeleton.css";
import React, { useState, useEffect } from "react";
import { redirect, usePathname } from 'next/navigation'
import useMe from "@/store/me.zustand.store";
import navigate from "@/components/navigate";
import IconLoaderSpin from "@/components/CustomIcon/IconLoaderSpin";
const inter = Inter({ subsets: ["latin"] });
/*
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};
*/


interface IRenderWithNav {
  children: React.ReactNode
}

const RenderWithNav = (props: IRenderWithNav) => {
  return (<>
    <Header />
    <section className="flex flex-row">
      <AppBar />
      <Toaster />
      <div className={`${inter.className} grow`}>{props.children}</div>
    </section>
  </>);
}

const whitelistNoLoginRoutes = [
  "/login",
  "/signup",
  "/"
];

const defaultNoLoginRoutes = "/login";
const defaultLoginRoutes = "/dashboard";

function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const me = useMe();
  const pathname = usePathname()

  useEffect(() => {
    if (me.userData?.id === -2) {
      me.populate();
    }
    else if (me.userData?.id === -1) {
      if (whitelistNoLoginRoutes.find(w => w === pathname) === undefined) {
        navigate(defaultNoLoginRoutes);
      }
    }
    else if (me.userData?.id > 0) {
      if (whitelistNoLoginRoutes.find(w => w === pathname) !== undefined) {
        navigate(defaultLoginRoutes);
      }
    }
  }, [pathname, me]);

  return (
    <html lang="en">
      <body className="flex flex-col">
        {
          (me.userData.id === -2) ? <section className="flex w-full h-full justify-center items-center">
            waiting ....
            <IconLoaderSpin />
          </section> :
            (pathname.startsWith("/view/") || me.userData.id === -1) ?
              <div className={`${inter.className} grow`}>{children}</div>
              :
              <RenderWithNav>
                <div className={`${inter.className} grow`}>{children}</div>
              </RenderWithNav>}
      </body>
    </html>
  );
}

export default RootLayout;